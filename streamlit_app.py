# -*- coding: utf-8 -*-
"""streamlit_app

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1l0lOJ9c3Ipo7agi_5QsHQtHQg4KmZ1iS
"""
# Este c√≥digo est√° pensado para usarse en entorno local con Streamlit
# pero incluye todo para que lo puedas modificar/testear en Google Colab tambi√©n

import streamlit as st
import pandas as pd
import numpy as np
import random
from datetime import datetime

# Configurar p√°gina
st.set_page_config(page_title="ElectroHouse Dashboard", layout="wide", page_icon="‚ö°")

# Simular datos ficticios
np.random.seed(42)
regiones = ['Centro', 'Norte', 'Sur', 'Cuyo', 'NEA', 'NOA', 'Patagonia']
canales = ['Online', 'Retail', 'Mayorista']
categorias = ['Electrodom√©sticos', 'Tecnolog√≠a', 'Herramientas', 'Iluminaci√≥n', 'Climatizaci√≥n']
fechas = pd.date_range(start='2024-01-01', periods=100)

df = pd.DataFrame({
    'Fecha': random.choices(fechas, k=100),
    'ID_Venta': [f"V{1000+i}" for i in range(100)],
    'Cliente': [f"Cliente_{i}" for i in range(100)],
    'Regi√≥n': np.random.choice(regiones, 100),
    'Producto': [f"Producto_{i%10}" for i in range(100)],
    'Categor√≠a': np.random.choice(categorias, 100),
    'Cantidad': np.random.randint(1, 10, 100),
    'Precio_Unitario': np.random.randint(5000, 30000, 100),
    'Canal_Venta': np.random.choice(canales, 100)
})

df['Ingreso'] = df['Cantidad'] * df['Precio_Unitario']
df['Costo_Unitario'] = df['Precio_Unitario'] * np.random.uniform(0.5, 0.8, 100)
df['Margen_Bruto'] = df['Ingreso'] - (df['Costo_Unitario'] * df['Cantidad'])
df['Mes'] = df['Fecha'].dt.strftime('%b')

# Sidebar con branding personal
with st.sidebar:
    st.title("Jesica Gimenez")
    st.markdown("[üîó Portfolio](https://portfolio-jesica-gimenez.vercel.app/)")
    st.markdown("[üíº LinkedIn](https://www.linkedin.com/in/jesica-gimenez/)")
    st.markdown("---")
    st.write("Dashboard de ventas con datos segmentados por regi√≥n, canal y categor√≠as.")

# Filtros
st.markdown("### üéØ Filtros")
with st.container():
    col1, col2 = st.columns(2)
    region = col1.selectbox("Seleccion√° una regi√≥n", ["Todas"] + sorted(df["Regi√≥n"].unique()))
    canal = col2.selectbox("Seleccion√° un canal de venta", ["Todos"] + sorted(df["Canal_Venta"].unique()))

df_filtrado = df.copy()
if region != "Todas":
    df_filtrado = df_filtrado[df_filtrado["Regi√≥n"] == region]
if canal != "Todos":
    df_filtrado = df_filtrado[df_filtrado["Canal_Venta"] == canal]

# KPIs
st.markdown("### üìà M√©tricas Clave")
kpi1, kpi2, kpi3 = st.columns(3)
kpi1.metric("Total Ingresos", f"${df_filtrado['Ingreso'].sum():,.0f}")
kpi2.metric("Ventas Totales", df_filtrado["ID_Venta"].nunique())
kpi3.metric("Margen Bruto", f"${df_filtrado['Margen_Bruto'].sum():,.0f}")

# Gr√°ficos
st.markdown("### üìä Visualizaciones")

with st.container():
    col1, col2 = st.columns(2)

    # Gr√°fico de ingresos por categor√≠a
    chart_cat = df_filtrado.groupby("Categor√≠a")["Ingreso"].sum().sort_values(ascending=True)
    col1.bar_chart(chart_cat)

    # Gr√°fico de ingresos por mes
    ingresos_mes = df_filtrado.groupby("Mes")["Ingreso"].sum().reindex(
        ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
    ).dropna()
    col2.line_chart(ingresos_mes)

with st.container():
    col3, col4 = st.columns(2)

    # Top 5 productos m√°s vendidos
    top_productos = df_filtrado.groupby("Producto")["Cantidad"].sum().sort_values(ascending=False).head(5)
    col3.bar_chart(top_productos)

    # Pie chart con categor√≠as
    st.markdown("#### Distribuci√≥n por Categor√≠a")
    pie_data = df_filtrado.groupby("Categor√≠a")["Ingreso"].sum()
    col4.pyplot(pie_data.plot.pie(autopct='%1.1f%%', figsize=(4, 4)).get_figure())

# Tabla de datos
st.markdown("### üìã Vista de Datos")
st.dataframe(df_filtrado)

# Exportar CSV
st.download_button("üì• Descargar datos filtrados en CSV", data=df_filtrado.to_csv(index=False), file_name="ventas_filtradas.csv", mime="text/csv")
